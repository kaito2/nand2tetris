// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 直接接続
    And(a=instruction[15], b=instruction[3], out=writeM);
    // ALU output or instruction
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=muxout1);
    // A
    Not(in=instruction[15], out=noti);
    Or(a=instruction[5], b=noti, out=loada);
    ARegister(in=muxout1, load=loada, out=aout, out[0..14]=addressM);
    // A or inM
    Mux16(a=aout, b=inM, sel=instruction[12], out=muxout2);

    // D
    // A命令の際は読み込まない (d2 and i)
    And(a=instruction[4], b=instruction[15], out=loadd);
    DRegister(in=aluout, load=loadd, out=dout);

    // ALU
    ALU(x=dout, y=muxout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=tmpzr, ng=tmpng);

    // judge jump
    // j1 and ng
    And(a=instruction[2], b=tmpng, out=tmpjump1);
    // j2 and zr
    And(a=instruction[1], b=tmpzr, out=tmpjump2);
    // j3 and not (ng or zr)
    Or(a=tmpng, b=tmpzr, out=ngorzr);
    Not(in=ngorzr, out=notngorzr);
    And(a=instruction[0], b=notngorzr, out=tmpjump3);
    // jump is needed ?
    Or(a=tmpjump1, b=tmpjump2, out=tmpjump12);
    Or(a=tmpjump12, b=tmpjump3, out=jump);
    // A命令ならジャンプしない (C命令ならする)
    And(a=jump, b=instruction[15], out=cjump);

    // inc は true でいい??
    PC(in=aout, load=cjump, inc=true, reset=reset, out[0..14]=pc);
}